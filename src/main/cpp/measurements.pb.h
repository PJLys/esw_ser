// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurements.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_measurements_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_measurements_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_measurements_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_measurements_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_measurements_2eproto;
namespace esw {
class pDataset;
struct pDatasetDefaultTypeInternal;
extern pDatasetDefaultTypeInternal _pDataset_default_instance_;
class pDataset_pRecord;
struct pDataset_pRecordDefaultTypeInternal;
extern pDataset_pRecordDefaultTypeInternal _pDataset_pRecord_default_instance_;
class pMeasurementInfo;
struct pMeasurementInfoDefaultTypeInternal;
extern pMeasurementInfoDefaultTypeInternal _pMeasurementInfo_default_instance_;
class pResult;
struct pResultDefaultTypeInternal;
extern pResultDefaultTypeInternal _pResult_default_instance_;
class pResult_pAverage;
struct pResult_pAverageDefaultTypeInternal;
extern pResult_pAverageDefaultTypeInternal _pResult_pAverage_default_instance_;
}  // namespace esw
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace esw {
enum pDataType : int {
  DOWNLOAD = 0,
  UPLOAD = 1,
  PING = 2,
  pDataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  pDataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool pDataType_IsValid(int value);
constexpr pDataType pDataType_MIN = static_cast<pDataType>(0);
constexpr pDataType pDataType_MAX = static_cast<pDataType>(2);
constexpr int pDataType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
pDataType_descriptor();
template <typename T>
const std::string& pDataType_Name(T value) {
  static_assert(std::is_same<T, pDataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to pDataType_Name().");
  return pDataType_Name(static_cast<pDataType>(value));
}
template <>
inline const std::string& pDataType_Name(pDataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<pDataType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool pDataType_Parse(absl::string_view name, pDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<pDataType>(
      pDataType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class pMeasurementInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.pMeasurementInfo) */ {
 public:
  inline pMeasurementInfo() : pMeasurementInfo(nullptr) {}
  ~pMeasurementInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR pMeasurementInfo(::google::protobuf::internal::ConstantInitialized);

  pMeasurementInfo(const pMeasurementInfo& from);
  pMeasurementInfo(pMeasurementInfo&& from) noexcept
    : pMeasurementInfo() {
    *this = ::std::move(from);
  }

  inline pMeasurementInfo& operator=(const pMeasurementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline pMeasurementInfo& operator=(pMeasurementInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pMeasurementInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const pMeasurementInfo* internal_default_instance() {
    return reinterpret_cast<const pMeasurementInfo*>(
               &_pMeasurementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pMeasurementInfo& a, pMeasurementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(pMeasurementInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pMeasurementInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pMeasurementInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pMeasurementInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const pMeasurementInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const pMeasurementInfo& from) {
    pMeasurementInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pMeasurementInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "esw.pMeasurementInfo";
  }
  protected:
  explicit pMeasurementInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurerNameFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string measurer_name = 3;
  void clear_measurer_name() ;
  const std::string& measurer_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_measurer_name(Arg_&& arg, Args_... args);
  std::string* mutable_measurer_name();
  PROTOBUF_NODISCARD std::string* release_measurer_name();
  void set_allocated_measurer_name(std::string* ptr);

  private:
  const std::string& _internal_measurer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_measurer_name(
      const std::string& value);
  std::string* _internal_mutable_measurer_name();

  public:
  // int64 timestamp = 2;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:esw.pMeasurementInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr measurer_name_;
    ::int64_t timestamp_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};// -------------------------------------------------------------------

class pDataset_pRecord final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.pDataset.pRecord) */ {
 public:
  inline pDataset_pRecord() : pDataset_pRecord(nullptr) {}
  ~pDataset_pRecord() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR pDataset_pRecord(::google::protobuf::internal::ConstantInitialized);

  pDataset_pRecord(const pDataset_pRecord& from);
  pDataset_pRecord(pDataset_pRecord&& from) noexcept
    : pDataset_pRecord() {
    *this = ::std::move(from);
  }

  inline pDataset_pRecord& operator=(const pDataset_pRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline pDataset_pRecord& operator=(pDataset_pRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pDataset_pRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const pDataset_pRecord* internal_default_instance() {
    return reinterpret_cast<const pDataset_pRecord*>(
               &_pDataset_pRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pDataset_pRecord& a, pDataset_pRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(pDataset_pRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pDataset_pRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pDataset_pRecord* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pDataset_pRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const pDataset_pRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const pDataset_pRecord& from) {
    pDataset_pRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pDataset_pRecord* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "esw.pDataset.pRecord";
  }
  protected:
  explicit pDataset_pRecord(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kDataTypeFieldNumber = 1,
  };
  // repeated double values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField<double>& values() const;
  ::google::protobuf::RepeatedField<double>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_values() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_values();

  public:
  // .esw.pDataType data_type = 1;
  void clear_data_type() ;
  ::esw::pDataType data_type() const;
  void set_data_type(::esw::pDataType value);

  private:
  ::esw::pDataType _internal_data_type() const;
  void _internal_set_data_type(::esw::pDataType value);

  public:
  // @@protoc_insertion_point(class_scope:esw.pDataset.pRecord)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<double> values_;
    int data_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};// -------------------------------------------------------------------

class pDataset final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.pDataset) */ {
 public:
  inline pDataset() : pDataset(nullptr) {}
  ~pDataset() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR pDataset(::google::protobuf::internal::ConstantInitialized);

  pDataset(const pDataset& from);
  pDataset(pDataset&& from) noexcept
    : pDataset() {
    *this = ::std::move(from);
  }

  inline pDataset& operator=(const pDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline pDataset& operator=(pDataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pDataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const pDataset* internal_default_instance() {
    return reinterpret_cast<const pDataset*>(
               &_pDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(pDataset& a, pDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(pDataset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pDataset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pDataset* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pDataset>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const pDataset& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const pDataset& from) {
    pDataset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pDataset* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "esw.pDataset";
  }
  protected:
  explicit pDataset(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef pDataset_pRecord pRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // repeated .esw.pDataset.pRecord records = 2;
  int records_size() const;
  private:
  int _internal_records_size() const;

  public:
  void clear_records() ;
  ::esw::pDataset_pRecord* mutable_records(int index);
  ::google::protobuf::RepeatedPtrField< ::esw::pDataset_pRecord >*
      mutable_records();
  private:
  const ::google::protobuf::RepeatedPtrField<::esw::pDataset_pRecord>& _internal_records() const;
  ::google::protobuf::RepeatedPtrField<::esw::pDataset_pRecord>* _internal_mutable_records();
  public:
  const ::esw::pDataset_pRecord& records(int index) const;
  ::esw::pDataset_pRecord* add_records();
  const ::google::protobuf::RepeatedPtrField< ::esw::pDataset_pRecord >&
      records() const;
  // .esw.pMeasurementInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::esw::pMeasurementInfo& info() const;
  PROTOBUF_NODISCARD ::esw::pMeasurementInfo* release_info();
  ::esw::pMeasurementInfo* mutable_info();
  void set_allocated_info(::esw::pMeasurementInfo* value);
  void unsafe_arena_set_allocated_info(::esw::pMeasurementInfo* value);
  ::esw::pMeasurementInfo* unsafe_arena_release_info();

  private:
  const ::esw::pMeasurementInfo& _internal_info() const;
  ::esw::pMeasurementInfo* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:esw.pDataset)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::esw::pDataset_pRecord > records_;
    ::esw::pMeasurementInfo* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};// -------------------------------------------------------------------

class pResult_pAverage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.pResult.pAverage) */ {
 public:
  inline pResult_pAverage() : pResult_pAverage(nullptr) {}
  ~pResult_pAverage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR pResult_pAverage(::google::protobuf::internal::ConstantInitialized);

  pResult_pAverage(const pResult_pAverage& from);
  pResult_pAverage(pResult_pAverage&& from) noexcept
    : pResult_pAverage() {
    *this = ::std::move(from);
  }

  inline pResult_pAverage& operator=(const pResult_pAverage& from) {
    CopyFrom(from);
    return *this;
  }
  inline pResult_pAverage& operator=(pResult_pAverage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pResult_pAverage& default_instance() {
    return *internal_default_instance();
  }
  static inline const pResult_pAverage* internal_default_instance() {
    return reinterpret_cast<const pResult_pAverage*>(
               &_pResult_pAverage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(pResult_pAverage& a, pResult_pAverage& b) {
    a.Swap(&b);
  }
  inline void Swap(pResult_pAverage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pResult_pAverage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pResult_pAverage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pResult_pAverage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const pResult_pAverage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const pResult_pAverage& from) {
    pResult_pAverage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pResult_pAverage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "esw.pResult.pAverage";
  }
  protected:
  explicit pResult_pAverage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kDataTypeFieldNumber = 1,
  };
  // double value = 2;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // .esw.pDataType data_type = 1;
  void clear_data_type() ;
  ::esw::pDataType data_type() const;
  void set_data_type(::esw::pDataType value);

  private:
  ::esw::pDataType _internal_data_type() const;
  void _internal_set_data_type(::esw::pDataType value);

  public:
  // @@protoc_insertion_point(class_scope:esw.pResult.pAverage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double value_;
    int data_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};// -------------------------------------------------------------------

class pResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:esw.pResult) */ {
 public:
  inline pResult() : pResult(nullptr) {}
  ~pResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR pResult(::google::protobuf::internal::ConstantInitialized);

  pResult(const pResult& from);
  pResult(pResult&& from) noexcept
    : pResult() {
    *this = ::std::move(from);
  }

  inline pResult& operator=(const pResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline pResult& operator=(pResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const pResult* internal_default_instance() {
    return reinterpret_cast<const pResult*>(
               &_pResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(pResult& a, pResult& b) {
    a.Swap(&b);
  }
  inline void Swap(pResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const pResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const pResult& from) {
    pResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "esw.pResult";
  }
  protected:
  explicit pResult(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef pResult_pAverage pAverage;

  // accessors -------------------------------------------------------

  enum : int {
    kAveragesFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // repeated .esw.pResult.pAverage averages = 2;
  int averages_size() const;
  private:
  int _internal_averages_size() const;

  public:
  void clear_averages() ;
  ::esw::pResult_pAverage* mutable_averages(int index);
  ::google::protobuf::RepeatedPtrField< ::esw::pResult_pAverage >*
      mutable_averages();
  private:
  const ::google::protobuf::RepeatedPtrField<::esw::pResult_pAverage>& _internal_averages() const;
  ::google::protobuf::RepeatedPtrField<::esw::pResult_pAverage>* _internal_mutable_averages();
  public:
  const ::esw::pResult_pAverage& averages(int index) const;
  ::esw::pResult_pAverage* add_averages();
  const ::google::protobuf::RepeatedPtrField< ::esw::pResult_pAverage >&
      averages() const;
  // .esw.pMeasurementInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::esw::pMeasurementInfo& info() const;
  PROTOBUF_NODISCARD ::esw::pMeasurementInfo* release_info();
  ::esw::pMeasurementInfo* mutable_info();
  void set_allocated_info(::esw::pMeasurementInfo* value);
  void unsafe_arena_set_allocated_info(::esw::pMeasurementInfo* value);
  ::esw::pMeasurementInfo* unsafe_arena_release_info();

  private:
  const ::esw::pMeasurementInfo& _internal_info() const;
  ::esw::pMeasurementInfo* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:esw.pResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::esw::pResult_pAverage > averages_;
    ::esw::pMeasurementInfo* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_measurements_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// pMeasurementInfo

// int32 id = 1;
inline void pMeasurementInfo::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t pMeasurementInfo::id() const {
  // @@protoc_insertion_point(field_get:esw.pMeasurementInfo.id)
  return _internal_id();
}
inline void pMeasurementInfo::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:esw.pMeasurementInfo.id)
}
inline ::int32_t pMeasurementInfo::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void pMeasurementInfo::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int64 timestamp = 2;
inline void pMeasurementInfo::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t pMeasurementInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:esw.pMeasurementInfo.timestamp)
  return _internal_timestamp();
}
inline void pMeasurementInfo::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:esw.pMeasurementInfo.timestamp)
}
inline ::int64_t pMeasurementInfo::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void pMeasurementInfo::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// string measurer_name = 3;
inline void pMeasurementInfo::clear_measurer_name() {
  _impl_.measurer_name_.ClearToEmpty();
}
inline const std::string& pMeasurementInfo::measurer_name() const {
  // @@protoc_insertion_point(field_get:esw.pMeasurementInfo.measurer_name)
  return _internal_measurer_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void pMeasurementInfo::set_measurer_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.measurer_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:esw.pMeasurementInfo.measurer_name)
}
inline std::string* pMeasurementInfo::mutable_measurer_name() {
  std::string* _s = _internal_mutable_measurer_name();
  // @@protoc_insertion_point(field_mutable:esw.pMeasurementInfo.measurer_name)
  return _s;
}
inline const std::string& pMeasurementInfo::_internal_measurer_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.measurer_name_.Get();
}
inline void pMeasurementInfo::_internal_set_measurer_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.measurer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* pMeasurementInfo::_internal_mutable_measurer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.measurer_name_.Mutable( GetArenaForAllocation());
}
inline std::string* pMeasurementInfo::release_measurer_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:esw.pMeasurementInfo.measurer_name)
  return _impl_.measurer_name_.Release();
}
inline void pMeasurementInfo::set_allocated_measurer_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.measurer_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.measurer_name_.IsDefault()) {
          _impl_.measurer_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:esw.pMeasurementInfo.measurer_name)
}

// -------------------------------------------------------------------

// pDataset_pRecord

// .esw.pDataType data_type = 1;
inline void pDataset_pRecord::clear_data_type() {
  _impl_.data_type_ = 0;
}
inline ::esw::pDataType pDataset_pRecord::data_type() const {
  // @@protoc_insertion_point(field_get:esw.pDataset.pRecord.data_type)
  return _internal_data_type();
}
inline void pDataset_pRecord::set_data_type(::esw::pDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:esw.pDataset.pRecord.data_type)
}
inline ::esw::pDataType pDataset_pRecord::_internal_data_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::esw::pDataType>(_impl_.data_type_);
}
inline void pDataset_pRecord::_internal_set_data_type(::esw::pDataType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_type_ = value;
}

// repeated double values = 2;
inline int pDataset_pRecord::_internal_values_size() const {
  return _internal_values().size();
}
inline int pDataset_pRecord::values_size() const {
  return _internal_values_size();
}
inline void pDataset_pRecord::clear_values() {
  _internal_mutable_values()->Clear();
}
inline double pDataset_pRecord::values(int index) const {
  // @@protoc_insertion_point(field_get:esw.pDataset.pRecord.values)
  return _internal_values().Get(index);
}
inline void pDataset_pRecord::set_values(int index, double value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:esw.pDataset.pRecord.values)
}
inline void pDataset_pRecord::add_values(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:esw.pDataset.pRecord.values)
}
inline const ::google::protobuf::RepeatedField<double>& pDataset_pRecord::values() const {
  // @@protoc_insertion_point(field_list:esw.pDataset.pRecord.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<double>* pDataset_pRecord::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:esw.pDataset.pRecord.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}

inline const ::google::protobuf::RepeatedField<double>& pDataset_pRecord::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<double>* pDataset_pRecord::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// pDataset

// .esw.pMeasurementInfo info = 1;
inline bool pDataset::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void pDataset::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::esw::pMeasurementInfo& pDataset::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::esw::pMeasurementInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::pMeasurementInfo&>(::esw::_pMeasurementInfo_default_instance_);
}
inline const ::esw::pMeasurementInfo& pDataset::info() const {
  // @@protoc_insertion_point(field_get:esw.pDataset.info)
  return _internal_info();
}
inline void pDataset::unsafe_arena_set_allocated_info(::esw::pMeasurementInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::esw::pMeasurementInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.pDataset.info)
}
inline ::esw::pMeasurementInfo* pDataset::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::esw::pMeasurementInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::esw::pMeasurementInfo* pDataset::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:esw.pDataset.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::esw::pMeasurementInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::esw::pMeasurementInfo* pDataset::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::pMeasurementInfo>(GetArenaForAllocation());
    _impl_.info_ = reinterpret_cast<::esw::pMeasurementInfo*>(p);
  }
  return _impl_.info_;
}
inline ::esw::pMeasurementInfo* pDataset::mutable_info() {
  ::esw::pMeasurementInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:esw.pDataset.info)
  return _msg;
}
inline void pDataset::set_allocated_info(::esw::pMeasurementInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::esw::pMeasurementInfo*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::esw::pMeasurementInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::esw::pMeasurementInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:esw.pDataset.info)
}

// repeated .esw.pDataset.pRecord records = 2;
inline int pDataset::_internal_records_size() const {
  return _internal_records().size();
}
inline int pDataset::records_size() const {
  return _internal_records_size();
}
inline void pDataset::clear_records() {
  _internal_mutable_records()->Clear();
}
inline ::esw::pDataset_pRecord* pDataset::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:esw.pDataset.records)
  return _internal_mutable_records()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::esw::pDataset_pRecord >*
pDataset::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:esw.pDataset.records)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_records();
}
inline const ::esw::pDataset_pRecord& pDataset::records(int index) const {
  // @@protoc_insertion_point(field_get:esw.pDataset.records)
    return _internal_records().Get(index);
}
inline ::esw::pDataset_pRecord* pDataset::add_records() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::esw::pDataset_pRecord* _add = _internal_mutable_records()->Add();
  // @@protoc_insertion_point(field_add:esw.pDataset.records)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::esw::pDataset_pRecord >&
pDataset::records() const {
  // @@protoc_insertion_point(field_list:esw.pDataset.records)
  return _internal_records();
}
inline const ::google::protobuf::RepeatedPtrField<::esw::pDataset_pRecord>&
pDataset::_internal_records() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.records_;
}
inline ::google::protobuf::RepeatedPtrField<::esw::pDataset_pRecord>*
pDataset::_internal_mutable_records() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.records_;
}

// -------------------------------------------------------------------

// pResult_pAverage

// .esw.pDataType data_type = 1;
inline void pResult_pAverage::clear_data_type() {
  _impl_.data_type_ = 0;
}
inline ::esw::pDataType pResult_pAverage::data_type() const {
  // @@protoc_insertion_point(field_get:esw.pResult.pAverage.data_type)
  return _internal_data_type();
}
inline void pResult_pAverage::set_data_type(::esw::pDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:esw.pResult.pAverage.data_type)
}
inline ::esw::pDataType pResult_pAverage::_internal_data_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::esw::pDataType>(_impl_.data_type_);
}
inline void pResult_pAverage::_internal_set_data_type(::esw::pDataType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_type_ = value;
}

// double value = 2;
inline void pResult_pAverage::clear_value() {
  _impl_.value_ = 0;
}
inline double pResult_pAverage::value() const {
  // @@protoc_insertion_point(field_get:esw.pResult.pAverage.value)
  return _internal_value();
}
inline void pResult_pAverage::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:esw.pResult.pAverage.value)
}
inline double pResult_pAverage::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void pResult_pAverage::_internal_set_value(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// pResult

// .esw.pMeasurementInfo info = 1;
inline bool pResult::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void pResult::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::esw::pMeasurementInfo& pResult::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::esw::pMeasurementInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::esw::pMeasurementInfo&>(::esw::_pMeasurementInfo_default_instance_);
}
inline const ::esw::pMeasurementInfo& pResult::info() const {
  // @@protoc_insertion_point(field_get:esw.pResult.info)
  return _internal_info();
}
inline void pResult::unsafe_arena_set_allocated_info(::esw::pMeasurementInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::esw::pMeasurementInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:esw.pResult.info)
}
inline ::esw::pMeasurementInfo* pResult::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::esw::pMeasurementInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::esw::pMeasurementInfo* pResult::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:esw.pResult.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::esw::pMeasurementInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::esw::pMeasurementInfo* pResult::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::esw::pMeasurementInfo>(GetArenaForAllocation());
    _impl_.info_ = reinterpret_cast<::esw::pMeasurementInfo*>(p);
  }
  return _impl_.info_;
}
inline ::esw::pMeasurementInfo* pResult::mutable_info() {
  ::esw::pMeasurementInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:esw.pResult.info)
  return _msg;
}
inline void pResult::set_allocated_info(::esw::pMeasurementInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::esw::pMeasurementInfo*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::esw::pMeasurementInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::esw::pMeasurementInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:esw.pResult.info)
}

// repeated .esw.pResult.pAverage averages = 2;
inline int pResult::_internal_averages_size() const {
  return _internal_averages().size();
}
inline int pResult::averages_size() const {
  return _internal_averages_size();
}
inline void pResult::clear_averages() {
  _internal_mutable_averages()->Clear();
}
inline ::esw::pResult_pAverage* pResult::mutable_averages(int index) {
  // @@protoc_insertion_point(field_mutable:esw.pResult.averages)
  return _internal_mutable_averages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::esw::pResult_pAverage >*
pResult::mutable_averages() {
  // @@protoc_insertion_point(field_mutable_list:esw.pResult.averages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_averages();
}
inline const ::esw::pResult_pAverage& pResult::averages(int index) const {
  // @@protoc_insertion_point(field_get:esw.pResult.averages)
    return _internal_averages().Get(index);
}
inline ::esw::pResult_pAverage* pResult::add_averages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::esw::pResult_pAverage* _add = _internal_mutable_averages()->Add();
  // @@protoc_insertion_point(field_add:esw.pResult.averages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::esw::pResult_pAverage >&
pResult::averages() const {
  // @@protoc_insertion_point(field_list:esw.pResult.averages)
  return _internal_averages();
}
inline const ::google::protobuf::RepeatedPtrField<::esw::pResult_pAverage>&
pResult::_internal_averages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.averages_;
}
inline ::google::protobuf::RepeatedPtrField<::esw::pResult_pAverage>*
pResult::_internal_mutable_averages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.averages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace esw


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::esw::pDataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::esw::pDataType>() {
  return ::esw::pDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_measurements_2eproto_2epb_2eh
